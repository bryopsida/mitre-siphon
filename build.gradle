plugins {
	id 'org.springframework.boot' version '2.4.2'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'java'
	id 'com.palantir.git-version' version '0.15.0'
	id "org.flywaydb.flyway" version "7.15.0"
	id "com.github.eirnym.js2p" version "1.0"
	id 'jacoco'
}

group = 'xyz.andrewkboyd'
version = gitVersion()
sourceCompatibility = '17'

ext {
	springDocVersion = "1.6.13"
	mitreTaxiiVersion = '1.1.0.1'
	mitreStixVersion = '1.2.0.2'
	junitVersion = '5.8.1'
	awaitiliyVersion = '4.2.0'
	okhttpVersion = '4.0.1'
}


configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

allprojects {
	repositories {
		jcenter()
		maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }

	}
	gradle.projectsEvaluated {
		tasks.withType(JavaCompile) {
			options.compilerArgs << "-Xlint:-processing" << "-Werror"
		}
	}
	test.useTestNG()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.springframework.boot:spring-boot-starter-quartz'
	implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: springDocVersion
	implementation group: 'org.springdoc', name: 'springdoc-openapi-security', version: springDocVersion
	implementation group: 'org.mitre.taxii', name: 'taxii', version: mitreTaxiiVersion
	implementation group: 'org.mitre', name: 'stix', version: mitreStixVersion
	implementation 'org.postgresql:postgresql'
	implementation 'org.flywaydb:flyway-core'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junitVersion
  testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junitVersion
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation group: 'com.squareup.okhttp3', name: 'okhttp', version: okhttpVersion
	testImplementation group: 'com.squareup.okhttp3', name: 'mockwebserver', version: okhttpVersion
	testImplementation group: 'org.awaitility', name: 'awaitility', version: awaitiliyVersion
}

jar {
	manifest {
		attributes 'Main-class': 'xyz.andrewkboyd.MitreSiphonApplication'
	}
}

test {
	useJUnitPlatform()
	jacoco {
		excludes = ['*generated*']
	}
	finalizedBy jacocoTestReport
}
jacoco {
	toolVersion = '0.8.7-SNAPSHOT'
}
jacocoTestReport {
	dependsOn test
	reports {
		xml.enabled true
		xml.destination file("${buildDir}/reports/jacoco/report.xml")
		html.enabled false
		csv.enabled false
	}
}

sourceSets {
	main {
		java {
			srcDirs = ["src/main/java", "src/generated/java"]
		}
	}
}

javadoc {
	exclude  "xyz/andrewkboyd/mitresiphon/generated/models"
	source = sourceSets.main.allJava
}

task versionFile()  {
	doLast {
		def folder = new File(buildDir.toPath().toString())
		if( !folder.exists() ) {
			folder.mkdirs()
		}
		new File(buildDir, "VERSION").text = gitVersion()
	}
}

flyway {
	url = 'jdbc:postgresql://localhost:5432/mitre'
	user = 'postgres'
	password = 'postgres'
	baselineOnMigrate = true
}


jsonSchema2Pojo {
	includeAdditionalProperties = false
	generateBuilders = false
	usePrimitives = false
	source = files("${sourceSets.main.output.resourcesDir}/json")
	targetDirectory = file("${project.rootDir}/src/generated/java")
	targetPackage = 'xyz.andrewkboyd.mitresiphon.generated.models'
	propertyWordDelimiters = [] as char[]
	useLongIntegers = false
	useBigIntegers = false
	useDoubleNumbers = true
	useBigDecimals = false
	includeHashcodeAndEquals = true
	includeToString = true
	annotationStyle = 'jackson2'
	customAnnotator = 'org.jsonschema2pojo.NoopAnnotator'
	includeJsr303Annotations = false
	sourceType = 'jsonschema'
	removeOldOutput = false
	outputEncoding = 'UTF-8'
	useJodaDates = false
	formatDateTimes = true
	formatDates = true
	formatTimes = true
	initializeCollections = true
	classNamePrefix = ""
	classNameSuffix = ""
	fileExtensions = [] as String[]
	includeConstructors = false
	parcelable = false
	serializable = true
	includeGetters = true
	includeSetters = true
	includeDynamicAccessors = false
	includeDynamicGetters = false
	includeDynamicSetters = false
	includeDynamicBuilders = false
	dateType = "java.time.LocalDate"
	dateTimeType = "java.time.LocalDateTime"
}

